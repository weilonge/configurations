#!/bin/bash
# Note 1: Add this line `source ~/configurations/bash_source_me` in
# ~/.bash_profile (for MacOSX) or ~/.bashrc (for Linux)
#
# Note 2: Since MacOSX and Linux use ~/.bashrc and ~/.bash_profile in different
# ways, add the following lines to ~/.bash_profile to make sure ~/.bashrc is
# loaded correctly.
# ```
# if [ -f ~/.bashrc ]; then
#     source ~/.bashrc
# fi
# ```

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

platform='unknown'
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
  if grep -q Microsoft /proc/version; then
    subPlatform='WSL'
  fi
  platform='Linux'
elif [[ "$unamestr" == 'Darwin' ]]; then
  platform='Darwin'
fi

# START: WSL
if [[ $subPlatform == 'WSL' ]]; then
  if [ "$(umask)" == '0000' ]; then
    umask 0022
  fi
fi
# END: WSL

# START: path
PATH=~/configurations/bin\
:~/bin\
:$PATH

if [[ $platform == 'Darwin' ]]; then
  PATH=/usr/local/sbin:$PATH
  PATH=$PATH:~/Library/Python/2.7/bin
fi
# END: path

# START: terminal/ls color
# Use https://geoff.greer.fm/lscolors/ to convert the format.
export CLICOLOR=1
if [[ $platform == 'Linux' ]]; then
  export LS_COLORS="\
di=36:\
ln=35:\
so=30:\
pi=33:\
ex=32:\
bd=34;46:\
cd=34;43:\
su=30;41:\
sg=30;46:\
tw=30;42:\
ow=30;43"
elif [[ $platform == 'Darwin' ]]; then
  export LSCOLORS=gxfxaxdxcxegedabagacad
fi
# END: terminal/ls color

# START: default language
if [[ $platform == 'Linux' ]]; then
    export LC_ALL="en_US.UTF-8"
    export LC_CTYPE="en_US.UTF-8"
fi
# END: default language

# START: bash-completion
# Use homebrew's bash completion script:
if [[ $platform == 'Darwin' ]]; then
  GIT_COMPLETION_BASH=$(brew --prefix)/etc/bash_completion.d/git-completion.bash
  if [ -f ${GIT_COMPLETION_BASH} ]; then
    . ${GIT_COMPLETION_BASH}
  fi
  AG_COMPLETION_BASH=$(brew --prefix)/etc/bash_completion.d/ag.bashcomp.sh
  if [ -f ${AG_COMPLETION_BASH} ]; then
    . ${AG_COMPLETION_BASH}
  fi
  TIG_COMPLETION_BASH=$(brew --prefix)/etc/bash_completion.d/tig-completion.bash
  if [ -f ${TIG_COMPLETION_BASH} ]; then
    . ${TIG_COMPLETION_BASH}
  fi
  YOUTUBE_DL_COMPLETION_BASH=$(brew --prefix)/etc/bash_completion.d/youtube-dl.bash-completion
  if [ -f ${YOUTUBE_DL_COMPLETION_BASH} ]; then
    . ${YOUTUBE_DL_COMPLETION_BASH}
  fi
fi
# END: git-completion

# START: powerline-shell
function _update_ps1() {
    PS1=$(powerline-shell $?)
}
if [[ -x "`which powerline-shell`" && $TERM != linux && ! $PROMPT_COMMAND =~ _update_ps1 ]]; then
    PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
fi
# END: powerline-shell

# START: CUDA
if [[ $platform == 'Linux' ]]; then
    export CUDA_HOME=/usr/local/cuda
    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:${CUDA_HOME}/lib64:${CUDA_HOME}/extras/CUPTI/lib64"
    export PATH="$CUDA_HOME/bin:$PATH"
elif [[ $platform == 'Darwin' ]]; then
    export CUDA_HOME=/usr/local/cuda
    export DYLD_LIBRARY_PATH="$DYLD_LIBRARY_PATH:$CUDA_HOME/lib"
    export PATH="$CUDA_HOME/bin:$PATH"
fi
# END: CUDA

# START: rust
# rust package management
if [ -f ~/.cargo/env ]; then
    source ~/.cargo/env
fi
# END: rust

# START: helper
stack() {
  op=$1
  name=$2
  value=$3
  file=/tmp/bash_stack_$name.$$

  case $op in
  push)
    echo $value >> $file
    ;;
  pop)
    if [ -f $file ]; then
      tail -1 $file
      sed -i DME -e '$d' $file
      rm ${file}DME
    fi
    ;;
  esac
}
mygrepall() { grep -rn ./ -e $1;}
# END: helper

# START: td
# Use `td` to show a notification in OS. It can be used with `;` to combine it
# with other commands, e.g. `git remote update; td`
# Use `tdbg` to show a notification after the background job applied. It can
# be used with `[ctrl-z]` to put the job in the background and show a
# notification after it's finished.
alias td="tnot \$?"
tdbg() {
  OUTPUT=`jobs -l | grep '^\[[0-9]*\]+' | sed -n 's/^\[\([0-9]*\)\]+/\1/p'`
  JOB_ID=`echo ${OUTPUT} | awk '{print $1}'`
  PID=`echo ${OUTPUT} | awk '{print $2}'`

  fg $JOB_ID
  wait $PID
  td
}
# END: td

alias kDS_Store="find . -name \'*.DS_Store\' -type f -delete"
alias kDot_="find . -name \'._*\' -type f -delete"
alias kUdFuse="kill `ps aux | grep udFuse | grep -v grep | awk '{print $2}'`"
alias mydu="du -sch .[!.]* * |sort -h"
# Force tmux to assume the terminal supports 256 colours.
if [[ $platform == 'Linux' ]]; then
    alias tmux="tmux -2"
fi
# alias du_cc='du -sh'
# alias du_sf='du -d1 -h'
if [[ $platform == 'Linux' ]]; then
  alias pbcopy="xclip -selection clipboard"
  alias pbpaste="xclip -selection clipboard -o"
fi
# END: helper

# START: synergy
if [[ $platform == 'Linux' ]]; then
  alias synergy-stop="systemctl stop synergy"
  alias synergy-start="systemctl start synergy"
elif [[ $platform == 'Darwin' ]]; then
  alias synergy-stop="launchctl unload /Library/LaunchAgents/com.symless.synergy.synergy-service.plist"
  alias synergy-start="launchctl load /Library/LaunchAgents/com.symless.synergy.synergy-service.plist"
fi
# END: synergy

# START: rtfm
# Reference:
# https://www.commandlinefu.com/commands/view/7581/rtfm-function
rtfm() { help $@ || man $@ || open "http://www.google.com/search?q=$@"; }
# END: rtfm

# START: weather
# Reference:
# https://www.commandlinefu.com/commands/view/17709/nice-weather-forecast-on-your-shell
weather() { curl -s wttr.in/$1; }
# END: weather

# START: showWhosUsingNet
# Reference:
# https://www.commandlinefu.com/commands/view/3542/show-apps-that-use-internet-connection-at-the-moment.-multi-language
showWhosUsingNet() { lsof -P -i -n; }
# END: showWhosUsingNet

dict() { ydict.js $1 | less -R; }

# START: esp-idf
PATH=$PATH:$HOME/Projects/esp32_esp-idf/xtensa-esp32-elf/bin
export IDF_PATH=~/Projects/esp32_esp-idf/esp-idf
# END: esp-idf

# START: dasht
export PATH=$PATH:~/Projects/tools/dasht/bin
export MANPATH=~/Projects/tools/dasht/man:$MANPATH
# END: dasht

# START: clear-console
ccc() {
  clear
  tmux clear-history
}
# END: clear-console

# START: movtogif
# Reference:
# https://gist.github.com/dergachev/4627207#gistcomment-1407037
movtogif(){
  ffmpeg -i "$1" -vf scale=800:-1 -r 10 -f image2pipe -vcodec ppm - |\
  convert -delay 5 -layers Optimize -loop 0 - "$2"
}
# END: movtogif

# START: audiomixer
# PulseAudio basically sits atop ALSA, and use it internally. ALSA is unable by
# itself to be used by multiple applications, so PulseAudio provides this
# functionality among others.
#
# Linux Audio System Hierarchy:
#
#   [ Application Layer - media players, web browsers, etc.            ]
#
#   [ PulseAudio Layer - a software proxy providing additional featues ]
#   [ (mixing, equalizer) between your application and the ALSA/OSS    ]
#   [ subsystem.                                                       ]
#
#   [ ALSA (driver) - dealing with the hardware, basically owning it.  ]
#
#   [ Hardware - Sound hardware and network adapter for other pulse    ]
#   [ servers or applications listening and broadcasting over RTP.     ]
#
# Reference:
# https://askubuntu.com/questions/581128/what-is-the-relation-between-alsa-and-pulseaudio-sound-architecture
if [[ $platform == 'Linux' ]]; then
  audiomixer() {
    # alsamixer is for controlling lower layer.
    pavucontrol
  }
fi
# END: audiomixer

# START: isNetworkAvailable
isNetworkAvailable() {
  TEST_URL='http://gstatic.com/generate_204'
  local status=$(curl -s -o /dev/null -w "%{http_code}" ${TEST_URL})
  if [[ $status == '204' ]]; then
    echo 'OK'
    true
  else
    echo 'No internet'
    false
  fi
}
# END: isNetworkAvailable
